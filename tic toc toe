import random

# Tic-Tac-Toe board
board = [' ' for _ in range(9)]  # 1D list to store 9 spaces (' ' means empty)

# Display the board
def print_board():
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

# Check if there's a winner
def winner(current_board, symbol):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    for condition in win_conditions:
        if all(current_board[i] == symbol for i in condition):
            return True
    return False

# Check for a tie
def tie():
    return ' ' not in board

# Minimax algorithm for AI (green = 'X')
def minimax(new_board, depth, is_maximizing):
    if winner(new_board, 'X'):
        return 1
    if winner(new_board, 'O'):
        return -1
    if tie():
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if new_board[i] == ' ':
                new_board[i] = 'X'
                score = minimax(new_board, depth + 1, False)
                new_board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if new_board[i] == ' ':
                new_board[i] = 'O'
                score = minimax(new_board, depth + 1, True)
                new_board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# AI move (green)
def ai_move():
    best_score = -float('inf')
    move = None
    for i in range(9):
        if board[i]
